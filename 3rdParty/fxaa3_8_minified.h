/* File generated with Shader Minifier 1.1.1
 * http://www.ctrl-alt-test.fr
 */
#ifndef FXAA3_8_MINIFIED_H_
# define FXAA3_8_MINIFIED_H_

const char Fxaa3_8_h[] = ""
 "#ifndef FXAA_PS3\n"
 "#define FXAA_PS3 0\n"
 "#endif\n"
 "#ifndef FXAA_360\n"
 "#define FXAA_360 0\n"
 "#endif\n"
 "#ifndef FXAA_PC\n"
 "#define FXAA_PC 0\n"
 "#endif\n"
 "#ifndef FXAA_PC_CONSOLE\n"
 "#define FXAA_PC_CONSOLE 0\n"
 "#endif\n"
 "#ifndef FXAA_GLSL_120\n"
 "#define FXAA_GLSL_120 0\n"
 "#endif\n"
 "#ifndef FXAA_GLSL_130\n"
 "#define FXAA_GLSL_130 0\n"
 "#endif\n"
 "#ifndef FXAA_HLSL_3\n"
 "#define FXAA_HLSL_3 0\n"
 "#endif\n"
 "#ifndef FXAA_HLSL_4\n"
 "#define FXAA_HLSL_4 0\n"
 "#endif\n"
 "#ifndef FXAA_HLSL_5\n"
 "#define FXAA_HLSL_5 0\n"
 "#endif\n"
 "#ifndef FXAA_EARLY_EXIT\n"
 "#define FXAA_EARLY_EXIT 1\n"
 "#endif\n"
 "#ifndef FXAA_DISCARD\n"
 "#define FXAA_DISCARD 0\n"
 "#endif\n"
 "#ifndef FXAA_LINEAR\n"
 "#define FXAA_LINEAR 0\n"
 "#endif\n"
 "#ifndef FXAA_FAST_PIXEL_OFFSET\n"
 "#ifdef GL_EXT_gpu_shader4\n"
 "#define FXAA_FAST_PIXEL_OFFSET 1\n"
 "#endif\n"
 "#ifdef GL_NV_gpu_shader5\n"
 "#define FXAA_FAST_PIXEL_OFFSET 1\n"
 "#endif\n"
 "#ifdef GL_ARB_gpu_shader5\n"
 "#define FXAA_FAST_PIXEL_OFFSET 1\n"
 "#endif\n"
 "#ifndef FXAA_FAST_PIXEL_OFFSET\n"
 "#define FXAA_FAST_PIXEL_OFFSET 0\n"
 "#endif\n"
 "#endif\n"
 "#ifndef FXAA_GATHER4_ALPHA\n"
 "#if (FXAA_HLSL_5==1)\n"
 "#define FXAA_GATHER4_ALPHA 1\n"
 "#endif\n"
 "#ifdef GL_ARB_gpu_shader5\n"
 "#define FXAA_GATHER4_ALPHA 1\n"
 "#endif\n"
 "#ifdef GL_NV_gpu_shader5\n"
 "#define FXAA_GATHER4_ALPHA 1\n"
 "#endif\n"
 "#ifndef FXAA_GATHER4_ALPHA\n"
 "#define FXAA_GATHER4_ALPHA 0\n"
 "#endif\n"
 "#endif\n"
 "#ifndef FXAA_CONSOLE__EDGE_SHARPNESS\n"
 "#if 1\n"
 "#define FXAA_CONSOLE__EDGE_SHARPNESS 8.0\n"
 "#else\n"
 "#define FXAA_CONSOLE__EDGE_SHARPNESS 4.0\n"
 "#endif\n"
 "#endif\n"
 "#ifndef FXAA_CONSOLE__EDGE_THRESHOLD\n"
 "#if 1\n"
 "#define FXAA_CONSOLE__EDGE_THRESHOLD 0.125\n"
 "#else\n"
 "#define FXAA_CONSOLE__EDGE_THRESHOLD 0.25\n"
 "#endif\n"
 "#endif\n"
 "#ifndef FXAA_CONSOLE__EDGE_THRESHOLD_MIN\n"
 "#define FXAA_CONSOLE__EDGE_THRESHOLD_MIN 0.05\n"
 "#endif\n"
 "#ifndef FXAA_QUALITY__EDGE_THRESHOLD\n"
 "#define FXAA_QUALITY__EDGE_THRESHOLD (1.0/6.0)\n"
 "#endif\n"
 "#ifndef FXAA_QUALITY__EDGE_THRESHOLD_MIN\n"
 "#define FXAA_QUALITY__EDGE_THRESHOLD_MIN (1.0/12.0)\n"
 "#endif\n"
 "#ifndef FXAA_QUALITY__SUBPIX_CAP\n"
 "#define FXAA_QUALITY__SUBPIX_CAP (3.0/4.0)\n"
 "#endif\n"
 "#ifndef FXAA_QUALITY__SUBPIX_TRIM\n"
 "#define FXAA_QUALITY__SUBPIX_TRIM (1.0/4.0)\n"
 "#endif\n"
 "#if FXAA_GLSL_120\n"
 "#define half float\n"
 "#define half2 vec2\n"
 "#define half3 vec3\n"
 "#define half4 vec4\n"
 "#define int2 ivec2\n"
 "#define float2 vec2\n"
 "#define float3 vec3\n"
 "#define float4 vec4\n"
 "#define FxaaInt2 ivec2\n"
 "#define FxaaFloat2 vec2\n"
 "#define FxaaFloat3 vec3\n"
 "#define FxaaFloat4 vec4\n"
 "#define FxaaDiscard discard\n"
 "#define FxaaDot3(a,b)dot(a,b)\n"
 "#define FxaaSat(x)clamp(x,0.0,1.0)\n"
 "#define FxaaLerp(x,y,s)mix(x,y,s)\n"
 "#define FxaaTex sampler2D\n"
 "#define FxaaTexTop(t,p)texture2DLod(t,p,0.0)\n"
 "#if (FXAA_FAST_PIXEL_OFFSET==1)\n"
 "#define FxaaTexOff(t,p,o,r)texture2DLodOffset(t,p,0.0,o)\n"
 "#else\n"
 "#define FxaaTexOff(t,p,o,r)texture2DLod(t,p+(o*r),0.0)\n"
 "#endif\n"
 "#if (FXAA_GATHER4_ALPHA==1)\n"
 "#define FxaaTexAlpha4(t,p,r)textureGather(t,p,3)\n"
 "#define FxaaTexOffAlpha4(t,p,o,r)textureGatherOffset(t,p,o,3)\n"
 "#endif\n"
 "#endif\n"
 "#if FXAA_GLSL_130\n"
 "#define half float\n"
 "#define half2 vec2\n"
 "#define half3 vec3\n"
 "#define half4 vec4\n"
 "#define int2 ivec2\n"
 "#define float2 vec2\n"
 "#define float3 vec3\n"
 "#define float4 vec4\n"
 "#define FxaaInt2 ivec2\n"
 "#define FxaaFloat2 vec2\n"
 "#define FxaaFloat3 vec3\n"
 "#define FxaaFloat4 vec4\n"
 "#define FxaaDiscard discard\n"
 "#define FxaaDot3(a,b)dot(a,b)\n"
 "#define FxaaSat(x)clamp(x,0.0,1.0)\n"
 "#define FxaaLerp(x,y,s)mix(x,y,s)\n"
 "#define FxaaTex sampler2D\n"
 "#define FxaaTexTop(t,p)textureLod(t,p,0.0)\n"
 "#define FxaaTexOff(t,p,o,r)textureLodOffset(t,p,0.0,o)\n"
 "#if (FXAA_GATHER4_ALPHA==1)\n"
 "#define FxaaTexAlpha4(t,p,r)textureGather(t,p,3)\n"
 "#define FxaaTexOffAlpha4(t,p,o,r)textureGatherOffset(t,p,o,3)\n"
 "#endif\n"
 "#endif\n"
 "#if (FXAA_HLSL_3==1)||(FXAA_360==1)\n"
 "#define int2 float2\n"
 "#define FxaaInt2 float2\n"
 "#define FxaaFloat2 float2\n"
 "#define FxaaFloat3 float3\n"
 "#define FxaaFloat4 float4\n"
 "#define FxaaDiscard clip(-1)\n"
 "#define FxaaDot3(a,b)dot(a,b)\n"
 "#define FxaaSat(x)saturate(x)\n"
 "#define FxaaLerp(x,y,s)lerp(x,y,s)\n"
 "#define FxaaTex sampler2D\n"
 "#define FxaaTexTop(t,p)tex2Dlod(t,float4(p,0.0,0.0))\n"
 "#define FxaaTexOff(t,p,o,r)tex2Dlod(t,float4(p+(o*r),0,0))\n"
 "#endif\n"
 "#if FXAA_HLSL_4\n"
 "#define FxaaInt2 int2\n"
 "#define FxaaFloat2 float2\n"
 "#define FxaaFloat3 float3\n"
 "#define FxaaFloat4 float4\n"
 "#define FxaaDiscard clip(-1)\n"
 "#define FxaaDot3(a,b)dot(a,b)\n"
 "#define FxaaSat(x)saturate(x)\n"
 "#define FxaaLerp(x,y,s)lerp(x,y,s)\nstruct FxaaTex{SamplerState smpl;Texture2D tex;};\n"
 "#define FxaaTexTop(t,p)t.tex.SampleLevel(t.smpl,p,0.0)\n"
 "#define FxaaTexOff(t,p,o,r)t.tex.SampleLevel(t.smpl,p,0.0,o)\n"
 "#endif\n"
 "#if FXAA_HLSL_5\n"
 "#define FxaaInt2 int2\n"
 "#define FxaaFloat2 float2\n"
 "#define FxaaFloat3 float3\n"
 "#define FxaaFloat4 float4\n"
 "#define FxaaDiscard clip(-1)\n"
 "#define FxaaDot3(a,b)dot(a,b)\n"
 "#define FxaaSat(x)saturate(x)\n"
 "#define FxaaLerp(x,y,s)lerp(x,y,s)\nstruct FxaaTex{SamplerState smpl;Texture2D tex;};\n"
 "#define FxaaTexTop(t,p)t.tex.SampleLevel(t.smpl,p,0.0)\n"
 "#define FxaaTexOff(t,p,o,r)t.tex.SampleLevel(t.smpl,p,0.0,o)\n"
 "#define FxaaTexAlpha4(t,p,r)t.tex.GatherAlpha(t.smpl,p)\n"
 "#define FxaaTexOffAlpha4(t,p,o,r)t.tex.GatherAlpha(t.smpl,p,o)\n"
 "#endif\n"
 "#if (FXAA_360==1)\n"
 "half4 FxaaPixelShader(float2 pos,float4 posPos,FxaaTex tex,float2 rcpFrame,float4 rcpFrameOpt)"
 "{"
   "half4 lumaNwNeSwSe;"
   "lumaNwNeSwSe.x=FxaaTexTop(tex,posPos.xy).w;"
   "lumaNwNeSwSe.y=FxaaTexTop(tex,posPos.zy).w;"
   "lumaNwNeSwSe.z=FxaaTexTop(tex,posPos.xw).w;"
   "lumaNwNeSwSe.w=FxaaTexTop(tex,posPos.zw).w;"
   "half4 rgbyM=FxaaTexTop(tex,pos.xy);"
   "lumaNwNeSwSe.y+=1./384.;"
   "half2 lumaMinTemp=min(lumaNwNeSwSe.xy,lumaNwNeSwSe.zw),lumaMaxTemp=max(lumaNwNeSwSe.xy,lumaNwNeSwSe.zw);"
   "half lumaMin=min(lumaMinTemp.x,lumaMinTemp.y),lumaMax=max(lumaMaxTemp.x,lumaMaxTemp.y),lumaMinM=min(lumaMin,rgbyM.w),lumaMaxM=max(lumaMax,rgbyM.w);"
   "if(lumaMaxM-lumaMinM<max(FXAA_CONSOLE__EDGE_THRESHOLD_MIN,lumaMax*FXAA_CONSOLE__EDGE_THRESHOLD))"
     "\n#if (FXAA_DISCARD==1)\n"
   "FxaaDiscard;"
   "\n#else\n"
   "return rgbyM;"
   "\n#endif\n"
   "half2 dir;"
   "dir.x=dot(lumaNwNeSwSe,float4(-1.,-1.,1.,1.));"
   "dir.y=dot(lumaNwNeSwSe,float4(1.,-1.,1.,-1.));"
   "half2 dir1;"
   "dir1=normalize(dir.xy);"
   "half dirAbsMinTimesC=min(abs(dir1.x),abs(dir1.y))*FXAA_CONSOLE__EDGE_SHARPNESS;"
   "half2 dir2;"
   "dir2=clamp(dir1.xy/dirAbsMinTimesC,-2.,2.);"
   "half4 rgbyN1=FxaaTexTop(tex,pos.xy-dir1*rcpFrameOpt.zw),rgbyP1=FxaaTexTop(tex,pos.xy+dir1*rcpFrameOpt.zw),rgbyN2=FxaaTexTop(tex,pos.xy-dir2*rcpFrameOpt.xy),rgbyP2=FxaaTexTop(tex,pos.xy+dir2*rcpFrameOpt.xy),rgbyA=rgbyN1*.5+rgbyP1*.5,rgbyB=rgbyN2*.25+rgbyP2*.25+rgbyA*.5;"
   "bool twoTap=rgbyB.w<lumaMin||rgbyB.w>lumaMax;"
   "if(twoTap)"
     "rgbyB.xyz=rgbyA.xyz;"
   "return rgbyB;"
 "}\n"
 "#endif\n"
 "#if (FXAA_PS3==1)&&(FXAA_EARLY_EXIT==0)\n"
 "#pragma disablepc all\n"
 "#pragma option O3\n"
 "#pragma option OutColorPrec=fp16\n"
 "#pragma texformat default RGBA8\n"
 "half4 FxaaPixelShader(float2 pos,float4 posPos,sampler2D tex,float2 rcpFrame,float4 rcpFrameOpt)"
 "{"
   "half4 dir,lumaNe=h4tex2Dlod(tex,half4(posPos.zy,0,0));"
   "lumaNe.w+=half(1./512.);"
   "dir.x=-lumaNe.w;"
   "dir.z=-lumaNe.w;"
   "half4 lumaSw=h4tex2Dlod(tex,half4(posPos.xw,0,0));"
   "dir.x+=lumaSw.w;"
   "dir.z+=lumaSw.w;"
   "half4 lumaNw=h4tex2Dlod(tex,half4(posPos.xy,0,0));"
   "dir.x-=lumaNw.w;"
   "dir.z+=lumaNw.w;"
   "half4 lumaSe=h4tex2Dlod(tex,half4(posPos.zw,0,0));"
   "dir.x+=lumaSe.w;"
   "dir.z-=lumaSe.w;"
   "half4 dir1_pos;"
   "dir1_pos.xy=normalize(dir.xyz).xz;"
   "half dirAbsMinTimesC=min(abs(dir1_pos.x),abs(dir1_pos.y))*half(FXAA_CONSOLE__EDGE_SHARPNESS);"
   "half4 dir2_pos;"
   "dir2_pos.xy=clamp(dir1_pos.xy/dirAbsMinTimesC,half(-2.),half(2.));"
   "dir1_pos.zw=pos.xy;"
   "dir2_pos.zw=pos.xy;"
   "half4 temp1N;"
   "temp1N.xy=dir1_pos.zw-dir1_pos.xy*rcpFrameOpt.zw;"
   "temp1N=h4tex2Dlod(tex,half4(temp1N.xy,0.,0.));"
   "half4 rgby1;"
   "rgby1.xy=dir1_pos.zw+dir1_pos.xy*rcpFrameOpt.zw;"
   "rgby1=h4tex2Dlod(tex,half4(rgby1.xy,0.,0.));"
   "rgby1=(temp1N+rgby1)*.5;"
   "half4 temp2N;"
   "temp2N.xy=dir2_pos.zw-dir2_pos.xy*rcpFrameOpt.xy;"
   "temp2N=h4tex2Dlod(tex,half4(temp2N.xy,0.,0.));"
   "half4 rgby2;"
   "rgby2.xy=dir2_pos.zw+dir2_pos.xy*rcpFrameOpt.xy;"
   "rgby2=h4tex2Dlod(tex,half4(rgby2.xy,0.,0.));"
   "rgby2=(temp2N+rgby2)*.5;"
   "half lumaMin=min(min(lumaNw.w,lumaSw.w),min(lumaNe.w,lumaSe.w)),lumaMax=max(max(lumaNw.w,lumaSw.w),max(lumaNe.w,lumaSe.w));"
   "rgby2=(rgby2+rgby1)*.5;"
   "bool twoTapLt=rgby2.w<lumaMin,twoTapGt=rgby2.w>lumaMax;"
   "if(twoTapLt||twoTapGt)"
     "rgby2=rgby1;"
   "return rgby2;"
 "}\n"
 "#endif\n"
 "#if (FXAA_PS3==1)&&(FXAA_EARLY_EXIT==1)\n"
 "#pragma disablepc all\n"
 "#pragma option O2\n"
 "#pragma option OutColorPrec=fp16\n"
 "#pragma texformat default RGBA8\n"
 "half4 FxaaPixelShader(float2 pos,float4 posPos,sampler2D tex,float2 rcpFrame,float4 rcpFrameOpt)"
 "{"
   "half4 rgbyNe=h4tex2Dlod(tex,half4(posPos.zy,0,0));"
   "half lumaNe=rgbyNe.w+half(1./512.);"
   "half4 lumaSw=h4tex2Dlod(tex,half4(posPos.xw,0,0));"
   "half lumaSwNegNe=lumaSw.w-lumaNe;"
   "half4 lumaNw=h4tex2Dlod(tex,half4(posPos.xy,0,0));"
   "half lumaMaxNwSw=max(lumaNw.w,lumaSw.w),lumaMinNwSw=min(lumaNw.w,lumaSw.w);"
   "half4 lumaSe=h4tex2Dlod(tex,half4(posPos.zw,0,0));"
   "half dirZ=lumaNw.w+lumaSwNegNe,dirX=-lumaNw.w+lumaSwNegNe;"
   "half3 dir;"
   "dir.y=0.;"
   "dir.x=lumaSe.w+dirX;"
   "dir.z=-lumaSe.w+dirZ;"
   "half lumaMinNeSe=min(lumaNe,lumaSe.w);"
   "half4 dir1_pos;"
   "dir1_pos.xy=normalize(dir).xz;"
   "half dirAbsMinTimes8=min(abs(dir1_pos.x),abs(dir1_pos.y))*half(FXAA_CONSOLE__EDGE_SHARPNESS);"
   "half4 dir2_pos;"
   "dir2_pos.xy=clamp(dir1_pos.xy/dirAbsMinTimes8,half(-2.),half(2.));"
   "dir1_pos.zw=pos.xy;"
   "dir2_pos.zw=pos.xy;"
   "half lumaMaxNeSe=max(lumaNe,lumaSe.w);"
   "half4 temp1N;"
   "temp1N.xy=dir1_pos.zw-dir1_pos.xy*rcpFrameOpt.zw;"
   "temp1N=h4tex2Dlod(tex,half4(temp1N.xy,0.,0.));"
   "half lumaMax=max(lumaMaxNwSw,lumaMaxNeSe),lumaMin=min(lumaMinNwSw,lumaMinNeSe);"
   "half4 rgby1;"
   "rgby1.xy=dir1_pos.zw+dir1_pos.xy*rcpFrameOpt.zw;"
   "rgby1=h4tex2Dlod(tex,half4(rgby1.xy,0.,0.));"
   "rgby1=(temp1N+rgby1)*.5;"
   "half4 rgbyM=h4tex2Dlod(tex,half4(pos.xy,0.,0.));"
   "half lumaMaxM=max(lumaMax,rgbyM.w),lumaMinM=min(lumaMin,rgbyM.w);"
   "half4 temp2N;"
   "temp2N.xy=dir2_pos.zw-dir2_pos.xy*rcpFrameOpt.xy;"
   "temp2N=h4tex2Dlod(tex,half4(temp2N.xy,0.,0.));"
   "half4 rgby2;"
   "rgby2.xy=dir2_pos.zw+dir2_pos.xy*rcpFrameOpt.xy;"
   "half lumaRangeM=(lumaMaxM-lumaMinM)/FXAA_CONSOLE__EDGE_THRESHOLD;"
   "rgby2=h4tex2Dlod(tex,half4(rgby2.xy,0.,0.));"
   "rgby2=(temp2N+rgby2)*.5;"
   "rgby2=(rgby2+rgby1)*.5;"
   "bool twoTapLt=rgby2.w<lumaMin,twoTapGt=rgby2.w>lumaMax,earlyExit=lumaRangeM<lumaMax,twoTap=twoTapLt||twoTapGt;"
   "if(twoTap)"
     "rgby2=rgby1;"
   "if(earlyExit)"
     "rgby2=rgbyM;"
   "return rgby2;"
 "}\n"
 "#endif\n"
 "#if (FXAA_PC_CONSOLE==1)\n"
 "half4 FxaaPixelShader(float2 pos,float4 posPos,FxaaTex tex,float2 rcpFrame,float4 rcpFrameOpt)"
 "{"
   "half4 dir;"
   "dir.y=0.;"
   "half4 lumaNe=FxaaTexTop(tex,posPos.zy);"
   "lumaNe.w+=half(1./384.);"
   "dir.x=-lumaNe.w;"
   "dir.z=-lumaNe.w;"
   "half4 lumaSw=FxaaTexTop(tex,posPos.xw);"
   "dir.x+=lumaSw.w;"
   "dir.z+=lumaSw.w;"
   "half4 lumaNw=FxaaTexTop(tex,posPos.xy);"
   "dir.x-=lumaNw.w;"
   "dir.z+=lumaNw.w;"
   "half4 lumaSe=FxaaTexTop(tex,posPos.zw);"
   "dir.x+=lumaSe.w;"
   "dir.z-=lumaSe.w;"
   "\n#if (FXAA_EARLY_EXIT==1)\n"
   "half4 rgbyM=FxaaTexTop(tex,pos.xy);"
   "half lumaMin=min(min(lumaNw.w,lumaSw.w),min(lumaNe.w,lumaSe.w)),lumaMax=max(max(lumaNw.w,lumaSw.w),max(lumaNe.w,lumaSe.w)),lumaMinM=min(lumaMin,rgbyM.w),lumaMaxM=max(lumaMax,rgbyM.w);"
   "if(lumaMaxM-lumaMinM<max(FXAA_CONSOLE__EDGE_THRESHOLD_MIN,lumaMax*FXAA_CONSOLE__EDGE_THRESHOLD))"
     "\n#if (FXAA_DISCARD==1)\n"
   "FxaaDiscard;"
   "\n#else\n"
   "return rgbyM;"
   "\n#endif\n"
   "\n#endif\n"
   "half4 dir1_pos;"
   "dir1_pos.xy=normalize(dir.xyz).xz;"
   "half dirAbsMinTimesC=min(abs(dir1_pos.x),abs(dir1_pos.y))*half(FXAA_CONSOLE__EDGE_SHARPNESS);"
   "half4 dir2_pos;"
   "dir2_pos.xy=clamp(dir1_pos.xy/dirAbsMinTimesC,half(-2.),half(2.));"
   "dir1_pos.zw=pos.xy;"
   "dir2_pos.zw=pos.xy;"
   "half4 temp1N;"
   "temp1N.xy=dir1_pos.zw-dir1_pos.xy*rcpFrameOpt.zw;"
   "temp1N=FxaaTexTop(tex,temp1N.xy);"
   "half4 rgby1;"
   "rgby1.xy=dir1_pos.zw+dir1_pos.xy*rcpFrameOpt.zw;"
   "rgby1=FxaaTexTop(tex,rgby1.xy);"
   "rgby1=(temp1N+rgby1)*.5;"
   "half4 temp2N;"
   "temp2N.xy=dir2_pos.zw-dir2_pos.xy*rcpFrameOpt.xy;"
   "temp2N=FxaaTexTop(tex,temp2N.xy);"
   "half4 rgby2;"
   "rgby2.xy=dir2_pos.zw+dir2_pos.xy*rcpFrameOpt.xy;"
   "rgby2=FxaaTexTop(tex,rgby2.xy);"
   "rgby2=(temp2N+rgby2)*.5;"
   "\n#if (FXAA_EARLY_EXIT==0)\n"
   "half lumaMin=min(min(lumaNw.w,lumaSw.w),min(lumaNe.w,lumaSe.w)),lumaMax=max(max(lumaNw.w,lumaSw.w),max(lumaNe.w,lumaSe.w));"
   "\n#endif\n"
   "rgby2=(rgby2+rgby1)*.5;"
   "bool twoTapLt=rgby2.w<lumaMin,twoTapGt=rgby2.w>lumaMax;"
   "if(twoTapLt||twoTapGt)"
     "rgby2=rgby1;"
   "return rgby2;"
 "}\n"
 "#endif\n"
 "#if (FXAA_PC==1)\n"
 "float4 FxaaPixelShader(float2 pos,float4 posPos,FxaaTex tex,float2 rcpFrame,float4 rcpFrameOpt)"
 "{"
   "\n#if (FXAA_GATHER4_ALPHA==1)\n"
   "float4 luma4A=FxaaTexOffAlpha4(tex,pos.xy,FxaaInt2(-1,-1),rcpFrame.xy);"
   "\n#if (FXAA_DISCARD==0)\n"
   "float4 rgbyM=FxaaTexTop(tex,pos.xy);"
   "\n#endif\n"
   "float4 luma4B=FxaaTexAlpha4(tex,pos.xy,rcpFrame.xy);"
   "float lumaNE=FxaaTexOff(tex,pos.xy,FxaaInt2(1,-1),rcpFrame.xy).w,lumaSW=FxaaTexOff(tex,pos.xy,FxaaInt2(-1,1),rcpFrame.xy).w,lumaNW=luma4A.w,lumaN=luma4A.z,lumaW=luma4A.x,lumaM=luma4A.y,lumaE=luma4B.z,lumaS=luma4B.x,lumaSE=luma4B.y;"
   "\n#else\n"
   "float lumaN=FxaaTexOff(tex,pos.xy,FxaaInt2(0,-1),rcpFrame.xy).w,lumaW=FxaaTexOff(tex,pos.xy,FxaaInt2(-1,0),rcpFrame.xy).w;"
   "float4 rgbyM=FxaaTexTop(tex,pos.xy);"
   "float lumaE=FxaaTexOff(tex,pos.xy,FxaaInt2(1,0),rcpFrame.xy).w,lumaS=FxaaTexOff(tex,pos.xy,FxaaInt2(0,1),rcpFrame.xy).w,lumaM=rgbyM.w;"
   "\n#endif\n"
   "float rangeMin=min(lumaM,min(min(lumaN,lumaW),min(lumaS,lumaE))),rangeMax=max(lumaM,max(max(lumaN,lumaW),max(lumaS,lumaE))),range=rangeMax-rangeMin;"
   "if(range<max(FXAA_QUALITY__EDGE_THRESHOLD_MIN,rangeMax*FXAA_QUALITY__EDGE_THRESHOLD))"
     "\n#if (FXAA_DISCARD==1)\n"
   "FxaaDiscard;"
   "\n#else\n"
   "return rgbyM;"
   "\n#endif\n"
   "\n#if (FXAA_GATHER4_ALPHA==0)\n"
   "float lumaNW=FxaaTexOff(tex,pos.xy,FxaaInt2(-1,-1),rcpFrame.xy).w,lumaNE=FxaaTexOff(tex,pos.xy,FxaaInt2(1,-1),rcpFrame.xy).w,lumaSW=FxaaTexOff(tex,pos.xy,FxaaInt2(-1,1),rcpFrame.xy).w,lumaSE=FxaaTexOff(tex,pos.xy,FxaaInt2(1,1),rcpFrame.xy).w;"
   "\n#endif\n"
   "\n#define FXAA_QUALITY__SUBPIX_TRIM_SCALE (1.0/(1.0-FXAA_QUALITY__SUBPIX_TRIM))\n"
   "float lumaL=(lumaN+lumaW+lumaE+lumaS)*.25,rangeL=abs(lumaL-lumaM),blendL=FxaaSat(rangeL/range-FXAA_QUALITY__SUBPIX_TRIM)*FXAA_QUALITY__SUBPIX_TRIM_SCALE;"
   "blendL=min(FXAA_QUALITY__SUBPIX_CAP,blendL);"
   "float edgeVert=abs(lumaNW+-2.*lumaN+lumaNE)+2.*abs(lumaW+-2.*lumaM+lumaE)+abs(lumaSW+-2.*lumaS+lumaSE),edgeHorz=abs(lumaNW+-2.*lumaW+lumaSW)+2.*abs(lumaN+-2.*lumaM+lumaS)+abs(lumaNE+-2.*lumaE+lumaSE);"
   "bool horzSpan=edgeHorz>=edgeVert;"
   "float lengthSign=horzSpan?-rcpFrame.y:-rcpFrame.x;"
   "if(!horzSpan)"
     "lumaN=lumaW;"
   "if(!horzSpan)"
     "lumaS=lumaE;"
   "float gradientN=abs(lumaN-lumaM),gradientS=abs(lumaS-lumaM);"
   "lumaN=(lumaN+lumaM)*.5;"
   "lumaS=(lumaS+lumaM)*.5;"
   "bool pairN=gradientN>=gradientS;"
   "if(!pairN)"
     "lumaN=lumaS;"
   "if(!pairN)"
     "gradientN=gradientS;"
   "if(!pairN)"
     "lengthSign*=-1.;"
   "float2 posN;"
   "posN.x=pos.x+(horzSpan?0.:lengthSign*.5);"
   "posN.y=pos.y+(horzSpan?lengthSign*.5:0.);"
   "\n#define FXAA_SEARCH_STEPS 6\n"
   "\n#define FXAA_SEARCH_THRESHOLD (1.0/4.0)\n"
   "gradientN*=FXAA_SEARCH_THRESHOLD;"
   "float2 posP=posN,offNP=horzSpan?FxaaFloat2(rcpFrame.x,0.):FxaaFloat2(0.f,rcpFrame.y);"
   "float lumaEndN,lumaEndP;"
   "bool doneN=false,doneP=false;"
   "posN+=offNP*-1.5;"
   "posP+=offNP*1.5;"
   "for(int i=0;i<FXAA_SEARCH_STEPS;i++)"
     "{"
       "lumaEndN=FxaaTexTop(tex,posN.xy).w;"
       "lumaEndP=FxaaTexTop(tex,posP.xy).w;"
       "bool doneN2=abs(lumaEndN-lumaN)>=gradientN,doneP2=abs(lumaEndP-lumaN)>=gradientN;"
       "if(doneN2&&!doneN)"
         "posN+=offNP;"
       "if(doneP2&&!doneP)"
         "posP-=offNP;"
       "if(doneN2&&doneP2)"
         "break;"
       "doneN=doneN2;"
       "doneP=doneP2;"
       "if(!doneN)"
         "posN-=offNP*2.;"
       "if(!doneP)"
         "posP+=offNP*2.;"
     "}"
   "float dstN=horzSpan?pos.x-posN.x:pos.y-posN.y,dstP=horzSpan?posP.x-pos.x:posP.y-pos.y;"
   "bool directionN=dstN<dstP;"
   "lumaEndN=directionN?lumaEndN:lumaEndP;"
   "if(lumaM-lumaN<0.==lumaEndN-lumaN<0.)"
     "lengthSign=0.;"
   "float spanLength=dstP+dstN;"
   "dstN=directionN?dstN:dstP;"
   "float subPixelOffset=.5+dstN*(-1./spanLength);"
   "subPixelOffset+=blendL*.125;"
   "subPixelOffset*=lengthSign;"
   "float3 rgbF=FxaaTexTop(tex,FxaaFloat2(pos.x+(horzSpan?0.:subPixelOffset),pos.y+(horzSpan?subPixelOffset:0.))).xyz;"
   "\n#if (FXAA_LINEAR==1)\n"
   "lumaL*=lumaL;"
   "\n#endif\n"
   "float lumaF=dot(rgbF,float3(.299,.587,.114))+5.96046e-08,lumaB=FxaaLerp(lumaF,lumaL,blendL),scale=min(4.,lumaB/lumaF);"
   "rgbF*=scale;"
   "return float4(rgbF,lumaM);"
 "}\n"
 "#endif\n";

#endif // FXAA3_8_MINIFIED_H_
